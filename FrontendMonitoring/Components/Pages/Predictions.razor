@page "/predictions"
@using MudBlazor
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using FrontendMonitoring.Models
@using FrontendMonitoring.Services
@inject PythonPredictionApiClient PredictionApiClient
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject HttpClient Http

<PageTitle>AI Voorspellingen</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    <!-- Hero Section -->
    <MudPaper Elevation="3" Class="pa-8 mb-6" Style="border-radius: 20px; background: linear-gradient(135deg, var(--mud-palette-tertiary), var(--mud-palette-tertiary-darken)); color: white; position: relative; overflow: hidden;">
        <MudStack Spacing="4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                <MudIcon Icon="@Icons.Material.Filled.PsychologyAlt" Style="font-size: 3rem; opacity: 0.9;" />
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h3" Style="font-weight: 700; margin: 0;">
                        AI Voorspellingen
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Style="opacity: 0.9; margin: 0;">
                        Random Forest Machine Learning model voor afvaldetectie voorspellingen
                    </MudText>
                </MudStack>
            </MudStack>
        </MudStack>
        <div style="position: absolute; top: -30px; right: -30px; width: 150px; height: 150px; background: rgba(255,255,255,0.1); border-radius: 50%; z-index: 0;"></div>
    </MudPaper>

    <!-- API Status Check -->
    <MudPaper Elevation="2" Class="pa-4 mb-6" Style="border-radius: 16px; border-left: 6px solid var(--mud-palette-info);">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.HealthAndSafety" Color="Color.Info" Style="font-size: 1.5rem;" />
            <MudText Typo="Typo.h6" Style="font-weight: 600; margin: 0;">API Status</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="CheckApiStatus" StartIcon="@Icons.Material.Filled.Refresh">
                Check Status
            </MudButton>
        </MudStack>
        @if (!string.IsNullOrEmpty(apiStatus))
        {
            <MudAlert Severity="@(apiStatus.Contains("live") ? Severity.Success : Severity.Error)" Class="mt-3">
                @apiStatus
            </MudAlert>
        }
    </MudPaper>

    <MudGrid Spacing="6">
        <!-- Single Prediction Card -->
        <MudItem xs="12" lg="6">
            <MudPaper Elevation="4" Class="pa-6" Style="border-radius: 20px; background: var(--mud-palette-surface); min-height: 500px;">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h5" Style="font-weight: 600; margin: 0;">Enkele Voorspelling</MudText>
                    </MudStack>
                    
                    <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">
                        Voorspel afvaldetectie op basis van confidence, temperatuur en tijdstip
                    </MudText>

                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="singlePrediction.Confidence" 
                                     Label="Confidence" 
                                     Variant="Variant.Outlined" 
                                     InputType="InputType.Number" 
                                     Step="0.01"
                                     Min="0" 
                                     Max="1"
                                     HelperText="Tussen 0.0 en 1.0" />
                        
                        <MudTextField @bind-Value="singlePrediction.Temperature" 
                                     Label="Temperatuur (Â°C)" 
                                     Variant="Variant.Outlined" 
                                     InputType="InputType.Number" 
                                     Step="0.1"
                                     HelperText="Temperatuur in Celsius" />
                        
                        <MudTimePicker @bind-Time="selectedTime" 
                                      Label="Tijdstip" 
                                      Variant="Variant.Outlined" 
                                      HelperText="Uur van de dag" />
                        
                        <MudTextField @bind-Value="singlePrediction.TrashType" 
                                     Label="Afvaltype (optioneel)" 
                                     Variant="Variant.Outlined" 
                                     HelperText="Bijv. plastic, papier, organisch" />
                        
                        <MudTextField @bind-Value="singlePrediction.Location" 
                                     Label="Locatie (optioneel)" 
                                     Variant="Variant.Outlined" 
                                     HelperText="Bijv. centrum, park, station" />
                    </MudStack>

                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="MakeSinglePrediction" 
                              Disabled="isLoading"
                              StartIcon="@Icons.Material.Filled.Psychology"
                              FullWidth="true"
                              Style="border-radius: 12px; height: 48px;">
                        @if (isLoading)
                        {
                            <MudProgressCircular Color="Color.Surface" Size="Size.Small" />
                            <span class="ml-2">Voorspelling maken...</span>
                        }
                        else
                        {
                            <span>Maak Voorspelling</span>
                        }
                    </MudButton>

                    @if (singleResult != null)
                    {
                        <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 12px; background: var(--mud-palette-success-lighten); border-left: 4px solid var(--mud-palette-success);">
                            <MudStack Spacing="2">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    <MudText Typo="Typo.h6" Style="color: var(--mud-palette-success-darken);">Voorspelling Resultaat</MudText>
                                </MudStack>
                                <MudText Typo="Typo.h4" Style="color: var(--mud-palette-success-darken); font-weight: 700;">
                                    @singleResult.Value.ToString("F2")
                                </MudText>
                                <MudText Typo="Typo.body2" Style="color: var(--mud-palette-success-darken);">
                                    Voorspelde afvaldetectie score
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Hotspot Prediction Card -->
        <MudItem xs="12" lg="6">
            <MudPaper Elevation="4" Class="pa-6" Style="border-radius: 20px; background: var(--mud-palette-surface); min-height: 500px;">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Warning" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h5" Style="font-weight: 600; margin: 0;">Hotspot Voorspelling</MudText>
                    </MudStack>
                    
                    <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">
                        Voorspel afval hotspots op basis van historische data
                    </MudText>

                    <MudStack Spacing="3">
                        <MudSelect T="int" @bind-Value="hotspotDays" Label="Periode" Variant="Variant.Outlined">
                            <MudSelectItem Value="1">Laatste 1 dag</MudSelectItem>
                            <MudSelectItem Value="3">Laatste 3 dagen</MudSelectItem>
                            <MudSelectItem Value="7">Laatste 7 dagen</MudSelectItem>
                            <MudSelectItem Value="14">Laatste 14 dagen</MudSelectItem>
                            <MudSelectItem Value="30">Laatste 30 dagen</MudSelectItem>
                        </MudSelect>
                    </MudStack>

                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Warning" 
                              OnClick="PredictHotspots" 
                              Disabled="isLoadingHotspots"
                              StartIcon="@Icons.Material.Filled.Explore"
                              FullWidth="true"
                              Style="border-radius: 12px; height: 48px;">
                        @if (isLoadingHotspots)
                        {
                            <MudProgressCircular Color="Color.Surface" Size="Size.Small" />
                            <span class="ml-2">Hotspots voorspellen...</span>
                        }
                        else
                        {
                            <span>Voorspel Hotspots</span>
                        }
                    </MudButton>

                    @if (hotspotResult != null)
                    {
                        <MudStack Spacing="3">
                            @if (hotspotResult.Hotspots?.Any() == true)
                            {
                                <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 12px; background: var(--mud-palette-warning-lighten); border-left: 4px solid var(--mud-palette-warning);">
                                    <MudStack Spacing="2">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                            <MudText Typo="Typo.h6" Style="color: var(--mud-palette-warning-darken);">Hotspot Locaties</MudText>
                                        </MudStack>
                                        @foreach (var hotspot in hotspotResult.Hotspots)
                                        {
                                            <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Style="margin: 2px;">
                                                @hotspot
                                            </MudChip>
                                        }
                                    </MudStack>
                                </MudPaper>
                            }

                            @if (hotspotResult.LocationPredictions?.Any() == true)
                            {
                                <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 12px;">
                                    <MudText Typo="Typo.h6" Class="mb-3">Alle Locatie Voorspellingen</MudText>
                                    <MudTable Items="@hotspotResult.LocationPredictions.OrderByDescending(x => x.Value)" Dense="true" Hover="true">
                                        <HeaderContent>
                                            <MudTh>Locatie</MudTh>
                                            <MudTh>Score</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd>@context.Key</MudTd>
                                            <MudTd>
                                                <MudProgressLinear Color="Color.Warning" Value="@GetProgressValue(context.Value)" Style="height: 8px; border-radius: 4px;" />
                                                <MudText Typo="Typo.caption">@context.Value.ToString("F2")</MudText>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Advanced Prediction Features -->
        <MudItem xs="12">
            <MudPaper Elevation="4" Class="pa-6" Style="border-radius: 20px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Science" Color="Color.Secondary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h5" Style="font-weight: 600; margin: 0;">Geavanceerde Voorspellingen</MudText>
                    </MudStack>
                    
                    <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">
                        Directe feature-gebaseerde voorspellingen voor experimentele doeleinden
                    </MudText>

                    <MudGrid Spacing="3">
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="customFeatures[0]" 
                                         Label="Feature 1" 
                                         Variant="Variant.Outlined" 
                                         InputType="InputType.Number" 
                                         Step="0.01" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="customFeatures[1]" 
                                         Label="Feature 2" 
                                         Variant="Variant.Outlined" 
                                         InputType="InputType.Number" 
                                         Step="0.01" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="customFeatures[2]" 
                                         Label="Feature 3" 
                                         Variant="Variant.Outlined" 
                                         InputType="InputType.Number" 
                                         Step="0.01" />
                        </MudItem>
                    </MudGrid>

                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              OnClick="MakeCustomPrediction" 
                              Disabled="isLoadingCustom"
                              StartIcon="@Icons.Material.Filled.Functions"
                              Style="border-radius: 12px;">
                        @if (isLoadingCustom)
                        {
                            <MudProgressCircular Color="Color.Secondary" Size="Size.Small" />
                            <span class="ml-2">Voorspelling maken...</span>
                        }
                        else
                        {
                            <span>Maak Custom Voorspelling</span>
                        }
                    </MudButton>

                    @if (customResult != null)
                    {
                        <MudAlert Severity="Severity.Info">
                            <strong>Custom Voorspelling:</strong> @customResult.Value.ToString("F4")
                        </MudAlert>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string apiStatus = "";
    private bool isLoading = false;
    private bool isLoadingHotspots = false;
    private bool isLoadingCustom = false;
    
    // Single prediction inputs
    private SinglePredictionInput singlePrediction = new();
    private TimeSpan? selectedTime = TimeSpan.FromHours(12);
    private double? singleResult;
    
    // Hotspot prediction
    private int hotspotDays = 7;
    private HotspotResult? hotspotResult;
    
    // Custom prediction
    private double[] customFeatures = new double[3];
    private double? customResult;
    
    private const string API_BASE_URL = "https://pythonbitbybit.orangecliff-c30465b7.northeurope.azurecontainerapps.io";

    protected override async Task OnInitializedAsync()
    {
        await CheckApiStatus();
    }    private async Task CheckApiStatus()
    {
        try
        {
            var response = await PredictionApiClient.CheckApiStatusAsync();
            apiStatus = response.Contains("World") ? "Python AI FastAPI model is live! â" : response;
        }
        catch (Exception ex)
        {
            apiStatus = $"API niet bereikbaar: {ex.Message}";
        }
    }    private async Task MakeSinglePrediction()
    {
        if (singlePrediction.Confidence < 0 || singlePrediction.Confidence > 1)
        {
            Snackbar.Add("Confidence moet tussen 0 en 1 zijn", Severity.Warning);
            return;
        }

        isLoading = true;
        try
        {
            var request = new FuturePredictionRequest
            {
                TrashType = singlePrediction.TrashType ?? "unknown",
                Location = singlePrediction.Location ?? "unknown",
                Confidence = singlePrediction.Confidence,
                Celcius = singlePrediction.Temperature
            };

            var result = await PredictionApiClient.MakeFuturePredictionAsync(request);
            
            if (result != null)
            {
                singleResult = result.Prediction?.FirstOrDefault();
                Snackbar.Add("Voorspelling succesvol gemaakt!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fout bij voorspelling maken", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PredictHotspots()
    {
        isLoadingHotspots = true;
        try
        {
            var request = new { days = hotspotDays };
            var response = await Http.PostAsJsonAsync($"{API_BASE_URL}/predict_trash_hotspots/", request);
            
            if (response.IsSuccessStatusCode)
            {
                hotspotResult = await response.Content.ReadFromJsonAsync<HotspotResult>();
                Snackbar.Add("Hotspot voorspelling succesvol!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fout bij hotspot voorspelling", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingHotspots = false;
        }
    }

    private async Task MakeCustomPrediction()
    {
        isLoadingCustom = true;
        try
        {
            var features = new { features = customFeatures.ToList() };
            var response = await Http.PostAsJsonAsync($"{API_BASE_URL}/predict/", features);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PredictionResponse>();
                customResult = result?.Prediction?.FirstOrDefault();
                Snackbar.Add("Custom voorspelling succesvol!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fout bij custom voorspelling", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingCustom = false;
        }
    }

    private double GetProgressValue(double value)
    {
        if (hotspotResult?.LocationPredictions == null || !hotspotResult.LocationPredictions.Any())
            return 0;
        
        var max = hotspotResult.LocationPredictions.Values.Max();
        return max == 0 ? 0 : (value / max) * 100;
    }

    public class SinglePredictionInput
    {
        public double Confidence { get; set; } = 0.8;
        public double Temperature { get; set; } = 20.0;
        public string? TrashType { get; set; }
        public string? Location { get; set; }
    }    public class HotspotResult
    {
        [JsonPropertyName("hotspots")]
        public List<string>? Hotspots { get; set; }
        
        [JsonPropertyName("location_predictions")]
        public Dictionary<string, double>? LocationPredictions { get; set; }
    }
}
