@page "/predictions"
@using MudBlazor
@using FrontendMonitoring.Services
@inject PythonPredictionApiClient PredictionApiClient
@inject ISnackbar Snackbar

<PageTitle>Predictions</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 12px;">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Style="font-weight: 600;">Make a Prediction</MudText>
            <MudDatePicker @bind-Date="selectedDate"
                           Label="Select Date"
                           Variant="Variant.Outlined"
                           Style="width: 200px;" />
            <MudNumericField @bind-Value="temperature"
                             Label="Temperature (Â°C)"
                             Variant="Variant.Outlined"
                             Min="-50" Max="50"
                             Style="width: 200px;" />
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="MakePrediction"
                       StartIcon="@Icons.Material.Filled.Send"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <span style="margin-left: 8px;">Sending...</span>
                }
                else
                {
                    <span>Send Prediction</span>
                }
            </MudButton>
            @if (response != null)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">
                    <MudText Typo="Typo.body1">Smerigste adres: @response.AdresPrediction</MudText>
                    <MudText Typo="Typo.body1">Verwacht aantal vuilitems: @response.CountOfPossibleLitter</MudText>
                    <MudText Typo="Typo.body1">Match met eerdere gegevens: @response.MatchWithModel%</MudText>
                    <MudText Typo="Typo.body1">Confidence: @response.Confidence%</MudText>
                    <MudText Typo="Typo.body1">Tijd van voorspelling: @response.Timestamp</MudText>
                </MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private DateTime? selectedDate = DateTime.Now; // Default date
    private double temperature = 20.0; // Default temperature
    private bool isLoading = false;
    private PredictionResponse? response;

    private async Task MakePrediction()
    {
        isLoading = true;
        try
        {
            if (selectedDate.HasValue)
            {
                var request = new PredictionRequest
                {
                    Date = selectedDate.Value,
                    Temperature = (int)temperature
                };
                response = await PredictionApiClient.MakePredictionAsync(request);

                if (response != null)
                {
                    Snackbar.Add("Prediction received successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to get a response from the API.", Severity.Warning);
                }
            }
            else
            {
                Snackbar.Add("Please select a valid date.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}