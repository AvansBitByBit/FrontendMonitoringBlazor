@page "/dashboard"
@using MudBlazor
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject FrontendMonitoring.Services.AfvalApiClient AfvalClient
@using FrontendMonitoring.Models
@using System.Text
@using System.Linq
@using System.Globalization
@inject ITokenStorage TokenStorage
@inject AuthenticationStateProvider AuthProvider
@using FrontendMonitoring.Services
@using Microsoft.AspNetCore.Components.Authorization

<MudContainer Class="dashboard-container fade-in" MaxWidth="MaxWidth.False">
    <MudGrid Spacing="2">        <!-- Filter Buttons and Refresh -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Snelle Filters</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Style="flex-wrap: wrap;">
                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last24Hours ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last24Hours))" 
                                  StartIcon="@Icons.Material.Filled.Schedule"
                                  Style="border-radius: 20px; text-transform: none;">
                            24 uur
                        </MudButton>
                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last7Days ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last7Days))" 
                                  StartIcon="@Icons.Material.Filled.DateRange"
                                  Style="border-radius: 20px; text-transform: none;">
                            7 dagen
                        </MudButton>
                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last30Days ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last30Days))" 
                                  StartIcon="@Icons.Material.Filled.CalendarMonth"
                                  Style="border-radius: 20px; text-transform: none;">
                            30 dagen
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Secondary" 
                                  OnClick="RefreshData" 
                                  StartIcon="@Icons.Material.Filled.Refresh"
                                  Style="border-radius: 20px; text-transform: none;">
                            Verversen
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>        <!-- Dropdowns -->
        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Periode</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="period" 
                              ToStringFunc="@converter" 
                              Label="Selecteer een periode" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable 
                              @onchange="OnPeriodChanged"
                              Style="border-radius: 12px;">
                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle tijd" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 1 dag" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 7 dagen" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 30 dagen" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Dit jaar" })" />
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Afvaltype</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="wasteType" 
                              ToStringFunc="@converter" 
                              Label="Selecteer afvaltype" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable
                              Style="border-radius: 12px;">
                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle types" })" />
                        @foreach (var type in TrashTypes)
                        {
                            <MudSelectItem Value="@(new FilterOption() { Name = type })">@type</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Locatie</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="location" 
                              ToStringFunc="@converter" 
                              Label="Selecteer locatie" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable
                              Style="border-radius: 12px;">
                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle locaties" })" />
                        @foreach (var group in GroupedLocations)
                        {
                            <MudSelectGroup Label="@group.Key">
                                @foreach (var loc in group)
                                {
                                    <MudSelectItem Value="@(new FilterOption() { Name = loc })">@loc</MudSelectItem>
                                }
                            </MudSelectGroup>                        }
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" 
                     Style="border-radius: 16px; background: linear-gradient(135deg, var(--mud-palette-primary), var(--mud-palette-primary-darken)); color: white; position: relative; overflow: hidden;">
                <MudStack Spacing="3">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">Totaal Samples</MudText>
                            <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">@FilteredDetections.Count()</MudText>
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Analytics" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">Gedetecteerde items</MudText>
                </MudStack>
                <div style="position: absolute; top: -20px; right: -20px; width: 100px; height: 100px; background: rgba(255,255,255,0.1); border-radius: 50%; z-index: 0;"></div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" 
                     Style="border-radius: 16px; background: linear-gradient(135deg, var(--mud-palette-info), var(--mud-palette-info-darken)); color: white; position: relative; overflow: hidden;">
                <MudStack Spacing="3">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">Weer Vandaag</MudText>
                            @if (apiData?.Weather?.Current != null)
                            {
                                <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">@apiData.Weather.Current.Temperature2m.ToString("0.0")°C</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">--</MudText>
                            }
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Thermostat" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">
                        @if (apiData?.Weather?.Current != null)
                        {
                            <span>Actuele temperatuur</span>
                        }
                        else
                        {
                            <span>Geen data beschikbaar</span>
                        }
                    </MudText>
                </MudStack>
                <div style="position: absolute; top: -20px; right: -20px; width: 100px; height: 100px; background: rgba(255,255,255,0.1); border-radius: 50%; z-index: 0;"></div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" 
                     Style="border-radius: 16px; background: linear-gradient(135deg, var(--mud-palette-success), var(--mud-palette-success-darken)); color: white; position: relative; overflow: hidden;">
                <MudStack Spacing="3">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">Meldingen</MudText>
                            <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">@FilteredDetections.Count()</MudText>
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Notifications" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">In geselecteerde periode</MudText>
                </MudStack>
                <div style="position: absolute; top: -20px; right: -20px; width: 100px; height: 100px; background: rgba(255,255,255,0.1); border-radius: 50%; z-index: 0;"></div>
            </MudPaper>        </MudItem>
        
        <!-- Afvalstromen Chart -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Afvalstromen Analyse</MudText>
                    </MudStack>
                    <MudPaper Elevation="1" Class="pa-4" Style="border-radius: 12px; background: var(--mud-palette-background);">
                        <MudChart ChartType="ChartType.Bar" 
                                 ChartSeries="@Series" 
                                 XAxisLabels="@XAxisLabels" 
                                 Width="100%" 
                                 Height="280px"
                                 ChartOptions="chartOptions">
                            <CustomGraphics>
                                <style>
                                    .mud-chart-bar {
                                        border-radius: 4px;
                                    }
                                    .mud-chart-legend {
                                        font-size: 12px;
                                        font-weight: 500;
                                    }
                                </style>
                            </CustomGraphics>
                        </MudChart>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudItem><!-- Locaties (map) -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface); min-height: 400px;">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Map" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Locatiekaart</MudText>
                    </MudStack>
                    <MudPaper Elevation="2" Style="border-radius: 12px; overflow: hidden; background-color: #2a2833;">
                        <div id="map" style="height: 320px; width: 100%;"></div>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudItem><!-- Detections Table (Summary Table) -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.TableChart" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Class="text-responsive-h6" Style="font-weight: 600;">Detectie Overzicht</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.ViewList" Size="Size.Small" Style="color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Rijen:</MudText>
                        </MudStack>
                        <MudSelect T="int" @bind-Value="maxTableRows" Dense="true" Variant="Variant.Outlined" Style="min-width: 90px;">
                            <MudSelectItem Value="10">10</MudSelectItem>
                            <MudSelectItem Value="25">25</MudSelectItem>
                            <MudSelectItem Value="50">50</MudSelectItem>
                            <MudSelectItem Value="100">100</MudSelectItem>
                            <MudSelectItem Value="int.MaxValue">Alle</MudSelectItem>
                        </MudSelect>                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Download" 
                                  OnClick="ExportCsv" 
                                  Style="border-radius: 20px; text-transform: none; box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);">
                            Export CSV
                        </MudButton>
                    </MudStack>
                </MudStack>
                
                <MudTable Items="FilteredDetections.Take(maxTableRows)" 
                         Dense="false" 
                         Hover="true" 
                         Bordered="false" 
                         Striped="false" 
                         Elevation="0"
                         Style="border-radius: 12px; overflow: hidden; border: 1px solid var(--mud-palette-lines-default);">
                    <HeaderContent>
                        <MudTh Style="background: var(--mud-palette-grey-lighter); font-weight: 600; color: var(--mud-palette-text-primary);">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" />
                                <span>Type</span>
                            </MudStack>
                        </MudTh>
                        <MudTh Style="background: var(--mud-palette-grey-lighter); font-weight: 600; color: var(--mud-palette-text-primary);">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                <span>Locatie</span>
                            </MudStack>
                        </MudTh>
                        <MudTh Style="background: var(--mud-palette-grey-lighter); font-weight: 600; color: var(--mud-palette-text-primary);">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                <span>Datum</span>
                            </MudStack>
                        </MudTh>
                        <MudTh Style="background: var(--mud-palette-grey-lighter); font-weight: 600; color: var(--mud-palette-text-primary);">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
                                <span>Confidence</span>
                            </MudStack>
                        </MudTh>
                        <MudTh Style="background: var(--mud-palette-grey-lighter); font-weight: 600; color: var(--mud-palette-text-primary);">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" />
                                <span>Temperatuur</span>
                            </MudStack>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Type" Style="padding: 12px 16px;">
                            <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px;">
                                @context.TrashType
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Locatie" Style="padding: 12px 16px;">
                            <MudText Style="font-size: 0.875rem;">@context.Location</MudText>
                        </MudTd>
                        <MudTd DataLabel="Datum" Style="padding: 12px 16px;">
                            <MudText Style="font-size: 0.875rem;">@(context.Time.HasValue ? context.Time.Value.ToShortDateString() : "Onbekend")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Confidence" Style="padding: 12px 16px;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudProgressCircular Color="@GetConfidenceColor(context.Confidence)" Value="@((int)(context.Confidence * 100))" Size="Size.Small" />
                                <MudText Style="font-weight: 500;">@context.Confidence.ToString("P0")</MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Temperatuur" Style="padding: 12px 16px;">
                            @if (context.Temperature.HasValue)
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudText Style="font-weight: 500;">@context.Temperature.Value.ToString("0.0")</MudText>
                                    <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary);">°C</MudText>
                                </MudStack>
                            }
                            else
                            {
                                <MudText Style="color: var(--mud-palette-text-secondary);">-</MudText>
                            }
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-8">
                            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Style="font-size: 3rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.h6" Style="color: var(--mud-palette-text-secondary);">Geen data gevonden</MudText>
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Probeer de filters aan te passen</MudText>
                        </MudStack>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>        <!-- Top 5 Trash Types and Locations -->
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Top 5 Afvaltypes</MudText>
                    </MudStack>
                    @if (TopTrashTypes.Any())
                    {
                        <MudStack Spacing="2">
                            @foreach (var (item, index) in TopTrashTypes.Select((t, i) => (t, i)))
                            {
                                <MudPaper Elevation="1" Class="pa-3" Style="border-radius: 12px; border-left: 4px solid var(--mud-palette-primary);">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudAvatar Color="Color.Primary" Size="Size.Small" Style="font-weight: 600;">@(index + 1)</MudAvatar>
                                            <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@item.Key</MudText>
                                        </MudStack>                                        <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px; font-weight: 600;">
                                            @item.Value
                                        </MudChip>
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Geen afvaltypes gevonden</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Secondary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Top 5 Locaties</MudText>
                    </MudStack>
                    @if (TopLocations.Any())
                    {
                        <MudStack Spacing="2">
                            @foreach (var (item, index) in TopLocations.Select((l, i) => (l, i)))
                            {
                                <MudPaper Elevation="1" Class="pa-3" Style="border-radius: 12px; border-left: 4px solid var(--mud-palette-secondary);">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudAvatar Color="Color.Secondary" Size="Size.Small" Style="font-weight: 600;">@(index + 1)</MudAvatar>
                                            <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@item.Key</MudText>
                                        </MudStack>                                        <MudChip T="string" Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px; font-weight: 600;">
                                            @item.Value
                                        </MudChip>
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOff" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Geen locaties gevonden</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

       
    </MudGrid>
</MudContainer>
}
@code {
    private bool _isLoggedIn = false;
    FilterOption period = new FilterOption { Name = "Laatste 7 dagen" };
    FilterOption wasteType = new FilterOption { Name = "Alle types" };
    FilterOption location = new FilterOption { Name = "Alle locaties" };

    private LitterApiResponse? apiData;
    
    // Chart options for better styling
    private ChartOptions chartOptions = new()
    {
        YAxisTicks = 10,
        YAxisLines = true,
        XAxisLines = false,
        ChartPalette = new string[] { "#6366f1", "#8b5cf6", "#06b6d4", "#10b981", "#f59e0b", "#ef4444" }
    };

    List<AfvalModel> detections = new();
    IEnumerable<AfvalModel> FilteredDetections =>
        detections.Where(d =>
            (wasteType.Name == "Alle types" || d.TrashType == wasteType.Name) &&
            (location.Name == "Alle locaties" || d.Location == location.Name) &&
            DateInSelectedPeriod(d.Time)
        );

    private bool DateInSelectedPeriod(DateTime? date)
    {
        if (!date.HasValue) return false;
        var now = DateTime.Now.Date;
        var d = date.Value.Date;
        return period.Name switch
        {
            "Alle tijd" => true,
            "Laatste 1 dag" => d >= now.AddDays(-1),
            "Laatste 7 dagen" => d >= now.AddDays(-7),
            "Laatste 30 dagen" => d >= now.AddDays(-30),
            "Dit jaar" => d.Year == now.Year,
            _ => true
        };
    }

    // Chart data for trash types
    public List<ChartSeries> Series => new List<ChartSeries>
    {
        new ChartSeries
        {
            Name = "Aantal",
            Data = TrashTypeCounts.Values.Select(c => (double)c).ToArray()
        }
    };

    public string[] XAxisLabels => TrashTypeCounts.Keys.ToArray();

    private Dictionary<string, int> TrashTypeCounts =>
        FilteredDetections
            .GroupBy(d => d.TrashType)
            .OrderByDescending(g => g.Count())
            .ToDictionary(g => g.Key, g => g.Count());

    public class FilterOption
    {
        public string Name { get; set; } = string.Empty;

        public override bool Equals(object? o) => (o as FilterOption)?.Name == Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    Func<FilterOption, string> converter = p => p?.Name ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication first
        try
        {
            _isLoggedIn = await JS.InvokeAsync<bool>("hasAuthToken");
            if (!_isLoggedIn)
            {
                Nav.NavigateTo("/login");
                return;
            }
        }
        catch
        {
            Nav.NavigateTo("/login");
            return;
        }

        // Load data
        try
        {
            apiData = await AfvalClient.GetLitterAndWeatherAsync();
            detections = apiData?.Litter ?? new List<AfvalModel>();
            // You can now use apiData.Weather for weather visualizations
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API call failed: {ex.Message}");
            detections = new List<AfvalModel>
            {
                new() { TrashType = "Organisch", Location = "Sector Noord", Time = DateTime.Now.AddDays(-3), Verified = false, Cleaned = false, Confidence = 0.78 }
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("initMap");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop failed: {ex.Message}");
            }
        }
    }

    private async Task ExportCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Type,Location,Timestamp,Temperature,Confidence");
        foreach (var d in FilteredDetections)
        {
            string type = EscapeCsv(d.TrashType);
            string location = EscapeCsv(d.Location);
            string timestamp = d.Time.HasValue ? d.Time.Value.ToString("u") : "";
            string temperature = d.Temperature.HasValue ? d.Temperature.Value.ToString("0.0", CultureInfo.InvariantCulture) : "";
            string confidence = d.Confidence.ToString("0.00", CultureInfo.InvariantCulture);

            csv.AppendLine($"{type},{location},{timestamp},{temperature},{confidence}");
        }
        await JS.InvokeVoidAsync("downloadCsv", "detections.csv", csv.ToString());
    }

    private string EscapeCsv(string? field)
    {
        if (string.IsNullOrEmpty(field)) return "";
        if (field.Contains("\""))
            field = field.Replace("\"", "\"\"");
        if (field.Contains(",") || field.Contains("\"") || field.Contains("\n"))
            return $"\"{field}\"";
        return field;
    }

    private string MostCommonTrashType =>
    FilteredDetections
        .GroupBy(d => d.TrashType)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .FirstOrDefault() ?? "Onbekend";

    private TimeFilter selectedTimeFilter = TimeFilter.Last7Days;

    private void SetTimeFilter(TimeFilter filter)
    {
        selectedTimeFilter = filter;
        // Update the period based on the selected filter
        switch (filter)
        {
            case TimeFilter.Last24Hours:
                period = new FilterOption { Name = "Laatste 1 dag" };
                break;
            case TimeFilter.Last7Days:
                period = new FilterOption { Name = "Laatste 7 dagen" };
                break;
            case TimeFilter.Last30Days:
                period = new FilterOption { Name = "Laatste 30 dagen" };
                break;
        }
        // Refresh the data based on the new filter
        RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            apiData = await AfvalClient.GetLitterAndWeatherAsync();
            detections = apiData?.Litter ?? new List<AfvalModel>();
            StateHasChanged(); // Refresh the UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API call failed: {ex.Message}");
        }
    }

    // Add this property to dynamically get trash types from detections
    private IEnumerable<string> TrashTypes => detections.Select(d => d.TrashType).Distinct().OrderBy(x => x);

    public enum TimeFilter
    {
        Last24Hours,
        Last7Days,
        Last30Days
    }

    // Top 5 trash types
    private IEnumerable<KeyValuePair<string, int>> TopTrashTypes =>
        FilteredDetections.GroupBy(d => d.TrashType)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());

    // Top 5 locations
    private IEnumerable<KeyValuePair<string, int>> TopLocations =>
        FilteredDetections.GroupBy(d => d.Location)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());

    private int maxTableRows = 25;

    // Group locations by prefix (e.g., first word or up to first space/comma)
    private IEnumerable<IGrouping<string, string>> GroupedLocations =>
        detections.Select(d => d.Location)
            .Where(l => !string.IsNullOrWhiteSpace(l))
            .Distinct()
            .OrderBy(l => l)
            .GroupBy(l => l.Split(' ')[0]);

    // Helper to extract group key (e.g., first word or up to first comma)
    private string GetLocationGroupKey(string location)
    {
        if (string.IsNullOrWhiteSpace(location)) return "Onbekend";
        var idx = location.IndexOf(' ');
        if (idx > 0)
            return location.Substring(0, idx);
        return location;
    }

    private void OnPeriodChanged(ChangeEventArgs e)
    {
        // Sync the button filter with the dropdown
        switch (period.Name)
        {
            case "Laatste 1 dag":
                selectedTimeFilter = TimeFilter.Last24Hours;
                break;
            case "Laatste 7 dagen":
                selectedTimeFilter = TimeFilter.Last7Days;
                break;
            case "Laatste 30 dagen":
                selectedTimeFilter = TimeFilter.Last30Days;
                break;
            default:
                selectedTimeFilter = TimeFilter.Last7Days;
                break;
        }        StateHasChanged();
    }

    private Color GetConfidenceColor(double confidence)
    {
        return confidence switch
        {
            >= 0.8 => Color.Success,
            >= 0.6 => Color.Warning,
            _ => Color.Error
        };
    }
}