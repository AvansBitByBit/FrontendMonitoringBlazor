@page "/dashboard"
@inject IJSRuntime JS
@inject DetectionService DetectionService
@using System.Text

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <!-- Dropdowns -->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Periode</MudText>
                <MudSelect T="Pizza" @bind-Value="pizza" ToStringFunc="@converter" Label="Selecteer een periode" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new Pizza() { Name = "Laatste 7 dagen" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Laatste 30 dagen" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Dit jaar" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Afvaltype</MudText>
                <MudSelect T="Pizza" @bind-Value="afvaltype" ToStringFunc="@converter" Label="Selecteer afvaltype" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new Pizza() { Name = "Alle types" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Plastic" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Papier" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Organisch" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Locatie</MudText>
                <MudSelect T="Pizza" @bind-Value="locatie" ToStringFunc="@converter" Label="Selecteer locatie" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new Pizza() { Name = "Alle locaties" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Sector Noord" })" />
                    <MudSelectItem Value="@(new Pizza() { Name = "Sector Zuid" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <!-- Metrics -->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Totaal Ingezameld</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Weer</MudText>
                <MudText>🌡️ 13°C - Bewolkt met buien</MudText>
                <MudText>💨 Wind: 16 km/u ZW</MudText>
                <MudText>💧 Luchtvochtigheid: 87%</MudText>
                <MudText>🌬️ Luchtkwaliteit: Goed</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Meldingen</MudText>
            </MudPaper>
        </MudItem>

        <!-- Afvalstromen -->
        <MudItem xs="12" sm="6" md="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Typo="Typo.h6">Afvalstromen</MudText>
            </MudPaper>
        </MudItem>

        <!-- Locaties (map) -->
        <MudItem xs="12" sm="6" md="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 400px;">
                <MudText Typo="Typo.h6">Locaties</MudText>
                <div id="map" style="height: 100%; min-height: 350px; width: 100%; border-radius: 4px; background-color: #2a2833;"></div>
            </MudPaper>
        </MudItem>

        <!-- Trends -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 300px;">
                <MudText Typo="Typo.h6" Class="mb-2">Trends & Analyses</MudText>
                <MudChart ChartType="ChartType.Bar" Labels="chartLabels" Data="chartData" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudStack Direction="Row" Justify="space-between" AlignItems="center" Class="mb-2">
                    <MudText Typo="Typo.h6">Detections</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadCsv">Download CSV</MudButton>
                </MudStack>
                <MudTable Items="detections" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Type</MudTh>
                        <MudTh>Location</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Verified</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Type">@context.Type</MudTd>
                        <MudTd DataLabel="Location">@context.Location</MudTd>
                        <MudTd DataLabel="Date">@context.TimeStamp.ToString("g")</MudTd>
                        <MudTd DataLabel="Verified">
                            <MudCheckBox @bind-Checked="@context.IsVerified" OnChanged="@(async _ => await ToggleVerified(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    Pizza pizza = new Pizza { Name = "Laatste 7 dagen" };
    Pizza afvaltype = new Pizza { Name = "Alle types" };
    Pizza locatie = new Pizza { Name = "Alle locaties" };

    private List<DetectionResult> detections = new();
    private string[] chartLabels = Array.Empty<string>();
    private int[] chartData = Array.Empty<int>();

    public class Pizza
    {
        public string Name { get; set; }

        public override bool Equals(object o) => (o as Pizza)?.Name == Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    Func<Pizza, string> converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        detections = await DetectionService.GetDetectionsAsync() ?? new List<DetectionResult>();
        chartLabels = detections.GroupBy(d => d.Type).Select(g => g.Key).ToArray();
        chartData = detections.GroupBy(d => d.Type).Select(g => g.Count()).ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("initMap");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop failed: {ex.Message}");
            }
        }
    }

    private async Task ToggleVerified(DetectionResult det)
    {
        var success = await DetectionService.VerifyAsync(det.Id);
        if (success)
        {
            det.IsVerified = !det.IsVerified;
        }
    }

    private async Task DownloadCsv()
    {
        var csv = await DetectionService.GenerateCsvAsync();
        var bytes = Encoding.UTF8.GetBytes(csv);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFileFromBase64", "detections.csv", base64);
    }
}
