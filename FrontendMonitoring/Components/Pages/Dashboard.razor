@page "/dashboard"
@using MudBlazor
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject FrontendMonitoring.Services.AfvalApiClient AfvalClient
@using FrontendMonitoring.Models
@using System.Text
@using System.Linq
@using System.Globalization
@inject ITokenStorage TokenStorage
@inject AuthenticationStateProvider AuthProvider
@inject PythonPredictionApiClient PredictionApiClient
@inject WeatherApiClient WeatherClient
@using FrontendMonitoring.Services
@using Microsoft.AspNetCore.Components.Authorization

@if (_isLoading)
{
    <!-- Loading Screen -->
    <MudContainer Class="loading-container loading-fade-in" MaxWidth="MaxWidth.False">
        <MudPaper Elevation="3" Class="loading-card loading-pulse">
            <MudStack AlignItems="AlignItems.Center" Spacing="4">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Style="width: 60px; height: 60px;" />
                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                    <MudText Typo="Typo.h5" Style="font-weight: 600; color: var(--mud-palette-primary);">
                        Dashboard laden...
                    </MudText>
                    <MudText Typo="Typo.body1" Style="color: var(--mud-palette-text-secondary);">
                        Data wordt opgehaald van de server
                    </MudText>
                </MudStack>
                <MudStack Spacing="2" Style="width: 100%;">
                    <MudSkeleton Width="100%" Height="8px" Animation="Animation.Wave" Style="border-radius: 4px;" />
                    <MudSkeleton Width="75%" Height="8px" Animation="Animation.Wave" Style="border-radius: 4px;" />
                    <MudSkeleton Width="90%" Height="8px" Animation="Animation.Wave" Style="border-radius: 4px;" />
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudContainer>
}
else
{
<MudContainer Class="dashboard-container fade-in" MaxWidth="MaxWidth.False">
    <MudGrid Spacing="2">        <!-- Filter Buttons and Refresh -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.FilterList" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Snelle Filters</MudText>
                    </MudStack>                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Class="filter-button-container">
                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last24Hours ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last24Hours))" 
                                  StartIcon="@Icons.Material.Filled.Schedule"
                                  Class="filter-button">
                            24 uur
                        </MudButton>
                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last7Days ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last7Days))" 
                                  StartIcon="@Icons.Material.Filled.DateRange"
                                  Class="filter-button">
                            7 dagen
                        </MudButton>                        <MudButton Variant="@(selectedTimeFilter == TimeFilter.Last30Days ? Variant.Filled : Variant.Outlined)" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => SetTimeFilter(TimeFilter.Last30Days))" 
                                  StartIcon="@Icons.Material.Filled.CalendarMonth"
                                  Class="filter-button">
                            30 dagen
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Secondary" 
                                  OnClick="RefreshData" 
                                  StartIcon="@(_isRefreshing ? Icons.Material.Filled.Refresh : Icons.Material.Filled.Refresh)"
                                  Disabled="_isRefreshing"
                                  Class="filter-button">
                            @if (_isRefreshing)
                            {
                                <div class="refresh-button-loading">
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="loading-spinner" />
                                    <span>Laden...</span>
                                </div>
                            }
                            else
                            {
                                <span>Verversen</span>
                            }
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>        <!-- Dropdowns -->
        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Periode</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="period" 
                              ToStringFunc="@converter" 
                              Label="Selecteer een periode" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable 
                              @onchange="OnPeriodChanged"
                              Style="border-radius: 12px;">
                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle tijd" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 1 dag" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 7 dagen" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 30 dagen" })" />
                        <MudSelectItem Value="@(new FilterOption() { Name = "Dit jaar" })" />
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Afvaltype</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="wasteType" 
                              ToStringFunc="@converter" 
                              Label="Selecteer afvaltype" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable
                              Style="border-radius: 12px;">
                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle types" })" />
                        @foreach (var type in TrashTypes)
                        {
                            <MudSelectItem Value="@(new FilterOption() { Name = type })">@type</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" Size="Size.Medium" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Locatie</MudText>
                    </MudStack>
                    <MudSelect T="FilterOption" 
                              @bind-Value="location" 
                              ToStringFunc="@converter" 
                              Label="Selecteer locatie" 
                              Variant="Variant.Outlined" 
                              Dense="false" 
                              Clearable
                              Style="border-radius: 12px;">                        <MudSelectItem Value="@(new FilterOption() { Name = "Alle locaties" })" />
                        @foreach (var group in GroupedLocations)
                        {
                            @foreach (var loc in group)
                            {
                                <MudSelectItem Value="@(new FilterOption() { Name = loc })">@loc</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudStack>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive stat-card-gradient-primary">
                <MudStack Spacing="3">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">Totaal Samples</MudText>
                            @if (_isRefreshing)
                            {
                                <MudSkeleton Width="60%" Height="40px" Animation="Animation.Wave" Class="loading-skeleton-white" />
                            }
                            else
                            {
                                <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">@FilteredDetections.Count()</MudText>
                            }
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Analytics" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">Gedetecteerde items</MudText>
                </MudStack>
                <div class="stat-card-decoration"></div>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive stat-card-gradient-info">
                <MudStack Spacing="3">                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">AI Voorspellingen</MudText>
                            @if (_isRefreshing || _isPredictionLoading)
                            {
                                <MudSkeleton Width="60%" Height="40px" Animation="Animation.Wave" Class="loading-skeleton-white" />
                            }
                            else if (todayPrediction != null)
                            {
                                <MudText Typo="Typo.h6" Style="font-weight: 500; line-height: 1;">@todayPrediction.CountOfPossibleLitter items</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.h6" Style="font-weight: 500; line-height: 1;">Niet beschikbaar</MudText>
                            }
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.PsychologyAlt" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">
                        @if (_isRefreshing || _isPredictionLoading)
                        {
                            <MudSkeleton Width="80%" Height="14px" Animation="Animation.Wave" Class="loading-skeleton-white" />
                        }
                        else if (todayPrediction != null)
                        {
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.body2" Style="font-weight: 600;">
                                    Vandaag: @todayPrediction.CountOfPossibleLitter items
                                </MudText>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" />
                                    <MudText Typo="Typo.caption">
                                        Temperatuur: @(todayTemperature?.ToString("F1") ?? "20")°C
                                    </MudText>
                                </MudStack>
                                <MudText Typo="Typo.caption">
                                    Vertrouwen: @todayPrediction.Confidence.ToString("P1")
                                </MudText>
                                <MudText Typo="Typo.caption">
                                    Match: @todayPrediction.MatchWithModel.ToString("F1")%
                                </MudText>
                                @if (tomorrowPrediction != null)
                                {
                                    <MudText Typo="Typo.body2" Style="font-weight: 600; margin-top: 8px;">
                                        Morgen: @tomorrowPrediction.CountOfPossibleLitter items
                                    </MudText>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                        <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" />
                                        <MudText Typo="Typo.caption">
                                            Temperatuur: @(tomorrowTemperature?.ToString("F1") ?? "20")°C
                                        </MudText>
                                    </MudStack>
                                    <MudText Typo="Typo.caption">
                                        Vertrouwen: @tomorrowPrediction.Confidence.ToString("P1")
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        Match: @tomorrowPrediction.MatchWithModel.ToString("F1")%
                                    </MudText>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <span>Geen voorspellingen beschikbaar</span>
                        }
                    </MudText>
                </MudStack>
                <div class="stat-card-decoration"></div>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive stat-card-gradient-success">
                <MudStack Spacing="3">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6" Style="font-weight: 600; opacity: 0.9;">Meldingen</MudText>
                            @if (_isRefreshing)
                            {
                                <MudSkeleton Width="60%" Height="40px" Animation="Animation.Wave" Class="loading-skeleton-white" />
                            }
                            else
                            {
                                <MudText Typo="Typo.h3" Style="font-weight: 700; line-height: 1;">@FilteredDetections.Count()</MudText>
                            }
                        </MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Notifications" Style="font-size: 2.5rem; opacity: 0.7;" />
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.8;">In geselecteerde periode</MudText>
                </MudStack>
                <div class="stat-card-decoration"></div>
            </MudPaper>        </MudItem>
          <!-- Afvalstromen Chart -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Afvalstromen Analyse</MudText>
                    </MudStack>                    <MudPaper Elevation="1" Class="pa-4" Style="border-radius: 12px; background: var(--mud-palette-background);">
                        @if (_isRefreshing)
                        {
                            <div class="chart-loading">
                                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                                <MudText Typo="Typo.body2" Class="chart-loading-text">Grafiek wordt geladen...</MudText>
                                <div class="data-viz-skeleton">
                                    <MudSkeleton Width="100%" Height="20px" Animation="Animation.Wave" />
                                    <MudSkeleton Width="80%" Height="20px" Animation="Animation.Wave" />
                                    <MudSkeleton Width="90%" Height="20px" Animation="Animation.Wave" />
                                    <MudSkeleton Width="70%" Height="20px" Animation="Animation.Wave" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <MudChart ChartType="ChartType.Bar" 
                                     ChartSeries="@Series" 
                                     XAxisLabels="@XAxisLabels" 
                                     Width="100%" 
                                     Height="280px"
                                     ChartOptions="chartOptions">
                                <CustomGraphics>
                                    <style>
                                        .mud-chart-bar {
                                            border-radius: 4px;
                                        }
                                        .mud-chart-legend {
                                            font-size: 12px;
                                            font-weight: 500;
                                        }
                                    </style>
                                </CustomGraphics>
                            </MudChart>
                        }
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudItem><!-- Locaties (map) -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface); min-height: 400px;">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Map" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Locatiekaart</MudText>
                    </MudStack>
                    <MudPaper Elevation="2" Style="border-radius: 12px; overflow: hidden; background-color: #2a2833;">
                        <div id="map" style="height: 320px; width: 100%;"></div>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudItem><!-- Detections Table (Summary Table) -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.TableChart" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Class="text-responsive-h6" Style="font-weight: 600;">Detectie Overzicht</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.ViewList" Size="Size.Small" Style="color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Rijen:</MudText>
                        </MudStack>
                        <MudSelect T="int" @bind-Value="maxTableRows" Dense="true" Variant="Variant.Outlined" Style="min-width: 90px;">
                            <MudSelectItem Value="10">10</MudSelectItem>
                            <MudSelectItem Value="25">25</MudSelectItem>
                            <MudSelectItem Value="50">50</MudSelectItem>
                            <MudSelectItem Value="100">100</MudSelectItem>
                            <MudSelectItem Value="int.MaxValue">Alle</MudSelectItem>
                        </MudSelect>                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Download" 
                                  OnClick="ExportCsv" 
                                  Class="btn-animate filter-button">
                            Export CSV
                        </MudButton>
                    </MudStack>
                </MudStack>                  <MudTable Items="FilteredDetections.Take(maxTableRows).ToArray()" 
                         Dense="false" 
                         Hover="true" 
                         Bordered="false" 
                         Striped="false" 
                         Elevation="0"
                         Loading="_isRefreshing"
                         LoadingProgressColor="Color.Primary"
                         SortLabel="Sorteer"
                         AllowUnsorted="true"
                         T="AfvalModel"
                         SortBy="@(new Func<AfvalModel, object>(item => item.Temperature ?? 0))"
                         DefaultSortDirection="SortDirection.Descending"
                         Style="border-radius: 12px; overflow: hidden; border: 1px solid var(--mud-palette-lines-default);"><LoadingContent>
                        <div class="table-loading">
                            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                            <MudText Typo="Typo.h6" Class="table-loading-text">Data wordt ververst...</MudText>
                            <div class="data-viz-skeleton">
                                <MudSkeleton Width="100%" Height="40px" Animation="Animation.Wave" />
                                <MudSkeleton Width="90%" Height="40px" Animation="Animation.Wave" />
                                <MudSkeleton Width="95%" Height="40px" Animation="Animation.Wave" />
                            </div>
                        </div>
                    </LoadingContent>                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Id ?? Guid.Empty)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Tag" Size="Size.Small" />
                                    <span>ID</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.TrashType ?? string.Empty)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" />
                                    <span>Type</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Location ?? string.Empty)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                    <span>Locatie</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Latitude ?? 0)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.GpsFixed" Size="Size.Small" />
                                    <span>Coördinaten</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Time ?? DateTime.MinValue)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                    <span>Datum</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Temperature ?? 0)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" />
                                    <span>Temperatuur</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Confidence)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
                                    <span>Confidence</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<AfvalModel, object>(x => x.Verified)">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.VerifiedUser" Size="Size.Small" />
                                    <span>Status</span>
                                </MudStack>
                            </MudTableSortLabel>
                        </MudTh>
                    </HeaderContent><RowTemplate>
                        <MudTd DataLabel="ID" Style="padding: 12px 16px;">
                            <MudText Style="font-family: 'Courier New', monospace; font-size: 0.8rem; color: var(--mud-palette-text-secondary);">
                                @(context.Id?.ToString().Substring(0, 8) ?? "N/A")...
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Type" Style="padding: 12px 16px;">
                            <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px;">
                                @context.TrashType
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Locatie" Style="padding: 12px 16px;">
                            <MudStack Spacing="1">
                                <MudText Style="font-size: 0.875rem; font-weight: 500;">@GetShortLocation(context.Location)</MudText>
                                <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary);">
                                    @GetFullLocation(context.Location)
                                </MudText>
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Coördinaten" Style="padding: 12px 16px;">
                            @if (context.Latitude.HasValue && context.Longitude.HasValue)
                            {
                                <MudStack Spacing="1">
                                    <MudText Style="font-family: 'Courier New', monospace; font-size: 0.8rem;">
                                        @context.Latitude.Value.ToString("F4")
                                    </MudText>
                                    <MudText Style="font-family: 'Courier New', monospace; font-size: 0.8rem;">
                                        @context.Longitude.Value.ToString("F4")
                                    </MudText>
                                </MudStack>
                            }
                            else
                            {
                                <MudText Style="color: var(--mud-palette-text-secondary);">-</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Datum" Style="padding: 12px 16px;">
                            <MudStack Spacing="1">
                                <MudText Style="font-size: 0.875rem; font-weight: 500;">
                                    @(context.Time?.ToString("dd/MM/yyyy") ?? "Onbekend")
                                </MudText>
                                <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary);">
                                    @(context.Time?.ToString("HH:mm") ?? "")
                                </MudText>
                            </MudStack>
                        </MudTd>                        <MudTd DataLabel="Temperatuur" Style="padding: 12px 16px;">
                            @if (context.Temperature.HasValue)
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" Color="@GetTemperatureColor(context.Temperature.Value)" />
                                    <MudText Style="font-weight: 500;">@context.Temperature.Value.ToString("F1", CultureInfo.InvariantCulture)</MudText>
                                    <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary);">°C</MudText>
                                </MudStack>
                            }
                            else
                            {
                                <MudText Style="color: var(--mud-palette-text-secondary);">-</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Confidence" Style="padding: 12px 16px;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudProgressCircular Color="@GetConfidenceColor(context.Confidence)" Value="@((int)(context.Confidence * 100))" Size="Size.Small" />
                                <MudText Style="font-weight: 500;">@context.Confidence.ToString("P0")</MudText>
                            </MudStack>
                        </MudTd>                        <MudTd DataLabel="Status" Style="padding: 12px 16px;">
                            <MudStack Spacing="1">
                                @if (context.Verified)
                                {
                                    <MudChip T="string" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Filled.Verified">
                                        Geverifieerd
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" Icon="@Icons.Material.Filled.PendingActions">
                                        Wachtend
                                    </MudChip>
                                }
                                @if (context.Cleaned)
                                {
                                    <MudChip T="string" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Icon="@Icons.Material.Filled.CleaningServices">
                                        Opgeruimd
                                    </MudChip>
                                }
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-8">
                            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Style="font-size: 3rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.h6" Style="color: var(--mud-palette-text-secondary);">Geen data gevonden</MudText>
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Probeer de filters aan te passen</MudText>
                        </MudStack>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>        <!-- Top 5 Trash Types and Locations -->
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Top 5 Afvaltypes</MudText>
                    </MudStack>
                    @if (TopTrashTypes.Any())
                    {
                        <MudStack Spacing="2">
                            @foreach (var (item, index) in TopTrashTypes.Select((t, i) => (t, i)))
                            {
                                <MudPaper Elevation="1" Class="pa-3" Style="border-radius: 12px; border-left: 4px solid var(--mud-palette-primary);">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudAvatar Color="Color.Primary" Size="Size.Small" Style="font-weight: 600;">@(index + 1)</MudAvatar>
                                            <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@item.Key</MudText>
                                        </MudStack>                                        <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px; font-weight: 600;">
                                            @item.Value
                                        </MudChip>
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Geen afvaltypes gevonden</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="3" Class="pa-6 card-animate card-mobile-responsive" Style="border-radius: 16px; background: var(--mud-palette-surface);">
                <MudStack Spacing="4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Secondary" Style="font-size: 1.5rem;" />
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">Top 5 Locaties</MudText>
                    </MudStack>
                    @if (TopLocations.Any())
                    {                        <MudStack Spacing="2">
                            @foreach (var (item, index) in TopLocations.Select((l, i) => (l, i)))
                            {
                                <MudPaper Elevation="1" Class="pa-3" Style="border-radius: 12px; border-left: 4px solid var(--mud-palette-secondary);">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudAvatar Color="Color.Secondary" Size="Size.Small" Style="font-weight: 600;">@(index + 1)</MudAvatar>
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@GetShortLocation(item.Key)</MudText>
                                                <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary);">@GetFullLocation(item.Key)</MudText>
                                            </MudStack>
                                        </MudStack>                                        <MudChip T="string" Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" Style="border-radius: 8px; font-weight: 600;">
                                            @item.Value
                                        </MudChip>
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOff" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                            <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">Geen locaties gevonden</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

       
    </MudGrid>
</MudContainer>
}
@code {
    private bool _isLoggedIn = false;
    private bool _isLoading = true;
    private bool _isRefreshing = false;
    private double? currentTemperature;
    private double? todayTemperature;
    private double? tomorrowTemperature;
    private PredictionResponse? predictionResult;
    private PredictionResponse? todayPrediction;
    private PredictionResponse? tomorrowPrediction;
    private bool _isPredictionLoading = false;

    FilterOption period = new FilterOption { Name = "Laatste 7 dagen" };
    FilterOption wasteType = new FilterOption { Name = "Alle types" };
    FilterOption location = new FilterOption { Name = "Alle locaties" };

    private LitterApiResponse? apiData;

    // Chart options for better styling
    private ChartOptions chartOptions = new()
    {
        YAxisTicks = 10,
        YAxisLines = true,
        XAxisLines = false,
        ChartPalette = new string[] { "#6366f1", "#8b5cf6", "#06b6d4", "#10b981", "#f59e0b", "#ef4444" }
    };

    List<AfvalModel> detections = new();
    IEnumerable<AfvalModel> FilteredDetections =>
        detections.Where(d =>
            (wasteType.Name == "Alle types" || d.TrashType == wasteType.Name) &&
            (location.Name == "Alle locaties" || d.Location == location.Name) &&
            DateInSelectedPeriod(d.Time)
        );

    private bool DateInSelectedPeriod(DateTime? date)
    {
        if (!date.HasValue) return false;
        var now = DateTime.Now.Date;
        var d = date.Value.Date;
        return period.Name switch
        {
            "Alle tijd" => true,
            "Laatste 1 dag" => d >= now.AddDays(-1),
            "Laatste 7 dagen" => d >= now.AddDays(-7),
            "Laatste 30 dagen" => d >= now.AddDays(-30),
            "Dit jaar" => d.Year == now.Year,
            _ => true
        };
    }

    // Chart data for trash types
    public List<ChartSeries> Series => new List<ChartSeries>
    {
        new ChartSeries
        {
            Name = "Aantal",
            Data = TrashTypeCounts.Values.Select(c => (double)c).ToArray()
        }
    };

    public string[] XAxisLabels => TrashTypeCounts.Keys.ToArray();    private Dictionary<string, int> TrashTypeCounts =>
        FilteredDetections.Where(d => !string.IsNullOrEmpty(d.TrashType))
            .GroupBy(d => d.TrashType!)
            .OrderByDescending(g => g.Count())
            .ToDictionary(g => g.Key, g => g.Count());

    public class FilterOption
    {
        public string Name { get; set; } = string.Empty;

        public override bool Equals(object? o) => (o as FilterOption)?.Name == Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    Func<FilterOption, string> converter = p => p?.Name ?? string.Empty;    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        
        // Check authentication first
        try
        {
            _isLoggedIn = await JS.InvokeAsync<bool>("hasAuthToken");
            if (!_isLoggedIn)
            {
                Nav.NavigateTo("/login");
                return;
            }
        }
        catch
        {
            Nav.NavigateTo("/login");
            return;
        }        // Load data
        try
        {
            // Try to get structured response first
            try
            {
                apiData = await AfvalClient.GetLitterAndWeatherAsync();
                detections = apiData?.Litter ?? new List<AfvalModel>();
                Console.WriteLine($"Loaded {detections.Count} detections from structured API response");
            }
            catch (Exception structuredException)
            {
                Console.WriteLine($"Structured API call failed: {structuredException.Message}");
                // Fall back to array response
                var litterArray = await AfvalClient.GetLitterDataAsync();
                detections = litterArray ?? new List<AfvalModel>();
                Console.WriteLine($"Loaded {detections.Count} detections from array API response");
                
                // Create a mock apiData for compatibility
                apiData = new LitterApiResponse
                {
                    Litter = detections,
                    Weather = "No weather data available"
                };
            }
            
            // Load AI predictions after loading detection data
            await LoadPredictions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"All API calls failed: {ex.Message}");
            detections = new List<AfvalModel>
            {
                new() { 
                    Id = Guid.NewGuid(),
                    TrashType = "Organisch", 
                    Location = "Sector Noord", 
                    Time = DateTime.Now.AddDays(-3), 
                    Verified = false, 
                    Cleaned = false, 
                    Confidence = 0.78,
                    Temperature = 18.5,
                    Latitude = 51.5877167,
                    Longitude = 4.7762418
                }
            };
            
            // Load AI predictions even if detection data fails
            await LoadPredictions();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Prepare detection data with coordinates for the map
                var mapData = FilteredDetections.Where(d => d.Latitude.HasValue && d.Longitude.HasValue)
                    .Select(d => new
                    {
                        id = d.Id?.ToString(),
                        lat = d.Latitude,
                        lng = d.Longitude,
                        type = d.TrashType,
                        location = d.Location,
                        time = d.Time?.ToString("dd/MM/yyyy HH:mm"),
                        confidence = d.Confidence,
                        temperature = d.Temperature,
                        verified = d.Verified,
                        cleaned = d.Cleaned
                    }).ToArray();

                await JS.InvokeVoidAsync("initMap", mapData);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop failed: {ex.Message}");
            }
        }
    }private async Task ExportCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine("ID,Type,Location,Latitude,Longitude,Timestamp,Temperature,Confidence,Verified,Cleaned");
        foreach (var d in FilteredDetections)
        {
            string id = EscapeCsv(d.Id?.ToString());
            string type = EscapeCsv(d.TrashType);
            string location = EscapeCsv(d.Location);
            string latitude = d.Latitude?.ToString("F6", CultureInfo.InvariantCulture) ?? "";
            string longitude = d.Longitude?.ToString("F6", CultureInfo.InvariantCulture) ?? "";
            string timestamp = d.Time.HasValue ? d.Time.Value.ToString("u") : "";
            string temperature = d.Temperature.HasValue ? d.Temperature.Value.ToString("0.0", CultureInfo.InvariantCulture) : "";
            string confidence = d.Confidence.ToString("0.00", CultureInfo.InvariantCulture);
            string verified = d.Verified.ToString();
            string cleaned = d.Cleaned.ToString();

            csv.AppendLine($"{id},{type},{location},{latitude},{longitude},{timestamp},{temperature},{confidence},{verified},{cleaned}");
        }
        await JS.InvokeVoidAsync("downloadCsv", "detections.csv", csv.ToString());
    }

    private string EscapeCsv(string? field)
    {
        if (string.IsNullOrEmpty(field)) return "";
        if (field.Contains("\""))
            field = field.Replace("\"", "\"\"");
        if (field.Contains(",") || field.Contains("\"") || field.Contains("\n"))
            return $"\"{field}\"";
        return field;
    }    private string MostCommonTrashType =>
    FilteredDetections.Where(d => !string.IsNullOrEmpty(d.TrashType))
        .GroupBy(d => d.TrashType!)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .FirstOrDefault() ?? "Onbekend";

    private TimeFilter selectedTimeFilter = TimeFilter.Last7Days;    private async Task SetTimeFilter(TimeFilter filter)
    {
        selectedTimeFilter = filter;
        // Update the period based on the selected filter
        switch (filter)
        {
            case TimeFilter.Last24Hours:
                period = new FilterOption { Name = "Laatste 1 dag" };
                break;
            case TimeFilter.Last7Days:
                period = new FilterOption { Name = "Laatste 7 dagen" };
                break;
            case TimeFilter.Last30Days:
                period = new FilterOption { Name = "Laatste 30 dagen" };
                break;
        }
        // Refresh the data and map based on the new filter
        await RefreshData();
    }    private async Task RefreshData()
    {
        _isRefreshing = true;
        StateHasChanged();
        
        try
        {
            // Try to get structured response first
            try
            {
                apiData = await AfvalClient.GetLitterAndWeatherAsync();
                detections = apiData?.Litter ?? new List<AfvalModel>();
                Console.WriteLine($"Refreshed {detections.Count} detections from structured API response");
            }
            catch (Exception structuredException)
            {
                Console.WriteLine($"Structured API refresh failed: {structuredException.Message}");
                // Fall back to array response
                var litterArray = await AfvalClient.GetLitterDataAsync();
                detections = litterArray ?? new List<AfvalModel>();
                Console.WriteLine($"Refreshed {detections.Count} detections from array API response");
                
                // Create a mock apiData for compatibility
                apiData = new LitterApiResponse
                {
                    Litter = detections,
                    Weather = "No weather data available"
                };
            }
            
            // Refresh AI predictions
            await LoadPredictions();
            
            // Update the map with new data
            await UpdateMap();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"All API refresh calls failed: {ex.Message}");
        }
        finally
        {
            _isRefreshing = false;
            StateHasChanged(); // Refresh the UI
        }
    }

    private async Task UpdateMap()
    {
        try
        {
            var mapData = FilteredDetections.Where(d => d.Latitude.HasValue && d.Longitude.HasValue)
                .Select(d => new
                {
                    id = d.Id?.ToString(),
                    lat = d.Latitude,
                    lng = d.Longitude,
                    type = d.TrashType,
                    location = d.Location,
                    time = d.Time?.ToString("dd/MM/yyyy HH:mm"),
                    confidence = d.Confidence,
                    temperature = d.Temperature,
                    verified = d.Verified,
                    cleaned = d.Cleaned
                }).ToArray();

            await JS.InvokeVoidAsync("updateMapMarkers", mapData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Map update failed: {ex.Message}");
        }
    }    // Add this property to dynamically get trash types from detections
    private IEnumerable<string> TrashTypes => detections.Select(d => d.TrashType).Where(t => !string.IsNullOrEmpty(t)).Cast<string>().Distinct().OrderBy(x => x);

    public enum TimeFilter
    {
        Last24Hours,
        Last7Days,
        Last30Days
    }    // Top 5 trash types
    private IEnumerable<KeyValuePair<string, int>> TopTrashTypes =>
        FilteredDetections.Where(d => !string.IsNullOrEmpty(d.TrashType))
            .GroupBy(d => d.TrashType!)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());

    // Top 5 locations
    private IEnumerable<KeyValuePair<string, int>> TopLocations =>
        FilteredDetections.Where(d => !string.IsNullOrEmpty(d.Location))
            .GroupBy(d => d.Location!)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());

    private int maxTableRows = 25;    // Group locations by prefix (e.g., first word or up to first space/comma)
    private IEnumerable<IGrouping<string, string>> GroupedLocations =>
        detections.Select(d => d.Location)
            .Where(l => !string.IsNullOrWhiteSpace(l))
            .Cast<string>()
            .Distinct()
            .OrderBy(l => l)
            .GroupBy(l => l.Split(' ')[0]);

    // Helper to extract group key (e.g., first word or up to first comma)
    private string GetLocationGroupKey(string location)
    {
        if (string.IsNullOrWhiteSpace(location)) return "Onbekend";
        var idx = location.IndexOf(' ');
        if (idx > 0)
            return location.Substring(0, idx);
        return location;
    }    private async void OnPeriodChanged(ChangeEventArgs e)
    {
        // Sync the button filter with the dropdown
        switch (period.Name)
        {
            case "Laatste 1 dag":
                selectedTimeFilter = TimeFilter.Last24Hours;
                break;
            case "Laatste 7 dagen":
                selectedTimeFilter = TimeFilter.Last7Days;
                break;
            case "Laatste 30 dagen":
                selectedTimeFilter = TimeFilter.Last30Days;
                break;
            default:
                selectedTimeFilter = TimeFilter.Last7Days;
                break;
        }        
        StateHasChanged();
        await UpdateMap(); // Update map when filter changes
    }    private async Task LoadPredictions()
    {
        Console.WriteLine("LoadPredictions: Starting...");
        _isPredictionLoading = true;
        try
        {
            var today = DateTime.Now.Date;
            var tomorrow = today.AddDays(1);
            Console.WriteLine($"LoadPredictions: Today={today:yyyy-MM-dd}, Tomorrow={tomorrow:yyyy-MM-dd}");
            
            // Fetch real weather data for today and tomorrow
            double todayTemp = 20.0; // fallback temperature
            double tomorrowTemp = 20.0; // fallback temperature
            
            try
            {
                Console.WriteLine("LoadPredictions: Fetching weather data for today and tomorrow...");
                var (todayTemperature, tomorrowTemperature) = await WeatherClient.GetTodayAndTomorrowTemperaturesAsync();
                todayTemp = todayTemperature;
                tomorrowTemp = tomorrowTemperature;
                currentTemperature = todayTemp; // Store current temperature for display
                this.todayTemperature = todayTemp; // Store today's temperature
                this.tomorrowTemperature = tomorrowTemp; // Store tomorrow's temperature
                Console.WriteLine($"LoadPredictions: Using real temperatures - Today: {todayTemp:F1}°C, Tomorrow: {tomorrowTemp:F1}°C");
            }
            catch (Exception weatherEx)
            {
                Console.WriteLine($"LoadPredictions: Failed to fetch weather data: {weatherEx.Message}. Using fallback temperatures: 20°C");
                currentTemperature = 20.0;
                todayTemperature = 20.0;
                tomorrowTemperature = 20.0;
            }

            // Get today's prediction with today's temperature
            Console.WriteLine("LoadPredictions: Making today's prediction request...");
            var todayRequest = new PredictionRequest
            {
                Date = today,
                Temperature = (int)Math.Round(todayTemp)
            };
            Console.WriteLine($"LoadPredictions: Today request - Date: {todayRequest.Date:yyyy-MM-dd}, Temperature: {todayRequest.Temperature}°C");
            todayPrediction = await PredictionApiClient.MakePredictionAsync(todayRequest);
            Console.WriteLine($"LoadPredictions: Today prediction result - {(todayPrediction != null ? $"Success: {todayPrediction.CountOfPossibleLitter} items" : "Failed: null response")}");

            // Get tomorrow's prediction with tomorrow's temperature
            Console.WriteLine("LoadPredictions: Making tomorrow's prediction request...");
            var tomorrowRequest = new PredictionRequest
            {
                Date = tomorrow,
                Temperature = (int)Math.Round(tomorrowTemp)
            };
            Console.WriteLine($"LoadPredictions: Tomorrow request - Date: {tomorrowRequest.Date:yyyy-MM-dd}, Temperature: {tomorrowRequest.Temperature}°C");
            tomorrowPrediction = await PredictionApiClient.MakePredictionAsync(tomorrowRequest);
            Console.WriteLine($"LoadPredictions: Tomorrow prediction result - {(tomorrowPrediction != null ? $"Success: {tomorrowPrediction.CountOfPossibleLitter} items" : "Failed: null response")}");

            Console.WriteLine($"LoadPredictions: Completed - Today: {todayPrediction?.CountOfPossibleLitter ?? 0} items (Temp: {todayTemp:F1}°C), Tomorrow: {tomorrowPrediction?.CountOfPossibleLitter ?? 0} items (Temp: {tomorrowTemp:F1}°C)");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadPredictions: Exception occurred: {ex.Message}");
            Console.WriteLine($"LoadPredictions: Stack trace: {ex.StackTrace}");
        }
        finally
        {
            _isPredictionLoading = false;
            Console.WriteLine("LoadPredictions: Setting _isPredictionLoading to false and calling StateHasChanged");
            StateHasChanged();
        }
    }private Color GetConfidenceColor(double confidence)
    {
        return confidence switch
        {
            >= 0.8 => Color.Success,
            >= 0.6 => Color.Warning,
            _ => Color.Error
        };
    }

    private Color GetTemperatureColor(double temperature)
    {
        return temperature switch
        {
            >= 25 => Color.Error,     // Hot (red)
            >= 20 => Color.Warning,   // Warm (orange)
            >= 15 => Color.Success,   // Mild (green)
            >= 10 => Color.Info,      // Cool (blue)
            _ => Color.Primary        // Cold (purple)
        };
    }

    private string GetShortLocation(string? location)
    {
        if (string.IsNullOrWhiteSpace(location)) 
            return "Onbekend";
        
        // Get the first part before comma (street name)
        var parts = location.Split(',');
        return parts[0].Trim();
    }

    private string GetFullLocation(string? location)
    {
        if (string.IsNullOrWhiteSpace(location)) 
            return "";
        
        // Get everything after the first comma (city, country)
        var commaIndex = location.IndexOf(',');
        if (commaIndex > 0 && commaIndex < location.Length - 1)
        {
            return location.Substring(commaIndex + 1).Trim();
        }
        return "";
    }
}