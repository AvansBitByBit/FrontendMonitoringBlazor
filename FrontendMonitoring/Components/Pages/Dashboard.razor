@page "/dashboard"
@using MudBlazor
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject FrontendMonitoring.Services.AfvalApiClient AfvalClient
@using FrontendMonitoring.Models
@using System.Text
@using System.Linq
@inject ITokenStorage TokenStorage
@inject AuthenticationStateProvider AuthProvider
@using FrontendMonitoring.Services
@using Microsoft.AspNetCore.Components.Authorization

<MudContainer Class="dashboard-container fade-in" MaxWidth="MaxWidth.False">
    <MudGrid Spacing="2">
        <!-- Filter Buttons and Refresh -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SetTimeFilter(TimeFilter.Last24Hours))" Disabled="@(selectedTimeFilter == TimeFilter.Last24Hours)">Laatste 24 uur</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SetTimeFilter(TimeFilter.Last7Days))" Disabled="@(selectedTimeFilter == TimeFilter.Last7Days)">Laatste 7 dagen</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SetTimeFilter(TimeFilter.Last30Days))" Disabled="@(selectedTimeFilter == TimeFilter.Last30Days)">Laatste 30 dagen</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="RefreshData">🔄 Verversen</MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Dropdowns -->
        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Periode</MudText>
                <MudSelect T="FilterOption" @bind-Value="period" ToStringFunc="@converter" Label="Selecteer een periode" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 7 dagen" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 30 dagen" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Dit jaar" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Afvaltype</MudText>
                <MudSelect T="FilterOption" @bind-Value="wasteType" ToStringFunc="@converter" Label="Selecteer afvaltype" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Alle types" })" />
                    @foreach (var type in TrashTypes)
                    {
                        <MudSelectItem Value="@(new FilterOption() { Name = type })">@type</MudSelectItem>
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Locatie</MudText>
                <MudSelect T="FilterOption" @bind-Value="location" ToStringFunc="@converter" Label="Selecteer locatie" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Alle locaties" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Sector Noord" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Sector Zuid" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Totaal aantal samples</MudText>
                <MudText Typo="Typo.h4" Class="text-responsive-h4">@FilteredDetections.Count()</MudText>
                <MudText Typo="Typo.caption" Class="text-responsive-body">Totaal aantal gedetecteerde items</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Weer vandaag</MudText>
                @if (apiData?.Weather?.Current != null)
                {
                    <MudText Class="text-responsive-body">🌡️ @apiData.Weather.Current.Temperature2m.ToString("0.0")°C</MudText>
                    <!-- Add more weather fields here if available -->
                }
                else
                {
                    <MudText Class="text-responsive-body">Geen weerdata beschikbaar</MudText>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Aantal meldingen</MudText>
                <MudText Typo="Typo.h4" Class="text-responsive-h4">@FilteredDetections.Count()</MudText>
                <MudText Typo="Typo.caption" Class="text-responsive-body">Nieuwe meldingen in geselecteerde periode</MudText>
            </MudPaper>
        </MudItem>        <!-- Afvalstromen -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            @* <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card"> *@
            @*     <MudText Typo="Typo.h6" Class="text-responsive-h6">Afvalstromen</MudText> *@
            @*     <MudText Typo="Typo.subtitle1" Class="mb-2"> *@
            @*         Meest voorkomend: <b>@MostCommonTrashType</b> *@
            @*     </MudText> *@
            @* </MudPaper> *@

            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                            fill: rgb(62,44,221);
                            padding: 20px;


                        }
                    </style>
                </CustomGraphics>
            </MudChart>


        </MudItem>


        <!-- Locaties (map) -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive" Style="min-height: 350px;">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Locaties</MudText>
                <div id="map" style="height: 300px; min-height: 250px; width: 100%; border-radius: 4px; background-color: #2a2833; margin-top: 1rem;"></div>
            </MudPaper>
        </MudItem>

        <!-- Detections Table (Summary Table) -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-mobile-responsive" Style="min-height: 200px;">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6" Class="text-responsive-h6">Detectie Overzicht</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportCsv" Class="export-btn btn-animate">Export CSV</MudButton>
                </MudStack>
                <MudTable Items="FilteredDetections" Dense="true" Hover="true" Bordered="true" Striped="true" Class="mt-2">
                    <HeaderContent>
                        <MudTh>Type</MudTh>
                        <MudTh>Locatie</MudTh>
                        <MudTh>Datum</MudTh>
                        <MudTh>Confidence</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Type">@context.TrashType</MudTd>
                        <MudTd DataLabel="Locatie">@context.Location</MudTd>
                        <MudTd DataLabel="Datum">@(context.Time.HasValue ? context.Time.Value.ToShortDateString() : "Onbekend")</MudTd>
                        <MudTd DataLabel="Confidence">@context.Confidence.ToString("P0")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Top 5 Trash Types and Locations -->
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Top 5 Afvaltypes</MudText>
                <MudList T="KeyValuePair<string, int>" Dense="true">
                    @foreach (var t in TopTrashTypes)
                    {
                        <MudListItem T="KeyValuePair<string, int>">@t.Key: @t.Value</MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Top 5 Locaties</MudText>
                <MudList T="KeyValuePair<string, int>" Dense="true">
                    @foreach (var l in TopLocations)
                    {
                        <MudListItem T="KeyValuePair<string, int>">@l.Key: @l.Value</MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>

       
    </MudGrid>
</MudContainer>
}
@code {
    private bool _isLoggedIn = false;
    FilterOption period = new FilterOption { Name = "Laatste 7 dagen" };
    FilterOption wasteType = new FilterOption { Name = "Alle types" };
    FilterOption location = new FilterOption { Name = "Alle locaties" };

    private LitterApiResponse? apiData;

    List<AfvalModel> detections = new();
    IEnumerable<AfvalModel> FilteredDetections =>
        detections.Where(d =>
            (wasteType.Name == "Alle types" || d.TrashType == wasteType.Name) &&
            (location.Name == "Alle locaties" || d.Location == location.Name));

    // Chart data for trash types
    public List<ChartSeries> Series => new List<ChartSeries>
    {
        new ChartSeries
        {
            Name = "Aantal",
            Data = TrashTypeCounts.Values.Select(c => (double)c).ToArray()
        }
    };

    public string[] XAxisLabels => TrashTypeCounts.Keys.ToArray();

    private Dictionary<string, int> TrashTypeCounts =>
        FilteredDetections
            .GroupBy(d => d.TrashType)
            .OrderByDescending(g => g.Count())
            .ToDictionary(g => g.Key, g => g.Count());

    public class FilterOption
    {
        public string Name { get; set; } = string.Empty;

        public override bool Equals(object? o) => (o as FilterOption)?.Name == Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    Func<FilterOption, string> converter = p => p?.Name ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication first
        try
        {
            _isLoggedIn = await JS.InvokeAsync<bool>("hasAuthToken");
            if (!_isLoggedIn)
            {
                Nav.NavigateTo("/login");
                return;
            }
        }
        catch
        {
            Nav.NavigateTo("/login");
            return;
        }

        // Load data
        try
        {
            apiData = await AfvalClient.GetLitterAndWeatherAsync();
            detections = apiData?.Litter ?? new List<AfvalModel>();
            // You can now use apiData.Weather for weather visualizations
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API call failed: {ex.Message}");
            detections = new List<AfvalModel>
            {
                new() { TrashType = "Organisch", Location = "Sector Noord", Time = DateTime.Now.AddDays(-3), Verified = false, Cleaned = false, Confidence = 0.78 }
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("initMap");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop failed: {ex.Message}");
            }
        }
    }

    private async Task ExportCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Type,Location,Timestamp,Verified,Cleaned,Confidence");
        foreach (var d in FilteredDetections)
        {
            csv.AppendLine($"{d.TrashType},{d.Location},{d.Time:u},{d.Verified},{d.Cleaned},{d.Confidence}");
        }
        await JS.InvokeVoidAsync("downloadCsv", "detections.csv", csv.ToString());
    }

    private string MostCommonTrashType =>
    FilteredDetections
        .GroupBy(d => d.TrashType)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key)
        .FirstOrDefault() ?? "Onbekend";

    private TimeFilter selectedTimeFilter = TimeFilter.Last7Days;

    private void SetTimeFilter(TimeFilter filter)
    {
        selectedTimeFilter = filter;
        // Update the period based on the selected filter
        switch (filter)
        {
            case TimeFilter.Last24Hours:
                period = new FilterOption { Name = "Laatste 24 uur" };
                break;
            case TimeFilter.Last7Days:
                period = new FilterOption { Name = "Laatste 7 dagen" };
                break;
            case TimeFilter.Last30Days:
                period = new FilterOption { Name = "Laatste 30 dagen" };
                break;
        }
        // Refresh the data based on the new filter
        RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            apiData = await AfvalClient.GetLitterAndWeatherAsync();
            detections = apiData?.Litter ?? new List<AfvalModel>();
            StateHasChanged(); // Refresh the UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API call failed: {ex.Message}");
        }
    }

    // Add this property to dynamically get trash types from detections
    private IEnumerable<string> TrashTypes => detections.Select(d => d.TrashType).Distinct().OrderBy(x => x);

    public enum TimeFilter
    {
        Last24Hours,
        Last7Days,
        Last30Days
    }

    // Top 5 trash types
    private IEnumerable<KeyValuePair<string, int>> TopTrashTypes =>
        FilteredDetections.GroupBy(d => d.TrashType)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());

    // Top 5 locations
    private IEnumerable<KeyValuePair<string, int>> TopLocations =>
        FilteredDetections.GroupBy(d => d.Location)
            .OrderByDescending(g => g.Count())
            .Take(5)
            .ToDictionary(g => g.Key, g => g.Count());
}