@page "/dashboard"
@using MudBlazor
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject FrontendMonitoring.Services.AfvalApiClient AfvalClient
@using FrontendMonitoring.Models
@using System.Security.Claims
@using System.Text
@using System.Linq
@inject ITokenStorage TokenStorage
@inject AuthenticationStateProvider AuthProvider
@using FrontendMonitoring.Services
@using Microsoft.AspNetCore.Components.Authorization

<MudContainer Class="dashboard-container fade-in" MaxWidth="MaxWidth.False">
    <MudGrid Spacing="2">
        <!-- Example: Show an alert for Admins -->
        @if (user?.IsInRole("Admin") == true)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled">Welcome, Admin! You have special privileges.</MudAlert>
            </MudItem>
        }
        <!-- Example: Show an alert for Users -->
        @if (user?.IsInRole("User") == true)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">Welcome, User!</MudAlert>
            </MudItem>
        }

        <!-- Dropdowns -->
        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Periode</MudText>
                <MudSelect T="FilterOption" @bind-Value="period" ToStringFunc="@converter" Label="Selecteer een periode" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 7 dagen" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Laatste 30 dagen" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Dit jaar" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Afvaltype</MudText>
                <MudSelect T="FilterOption" @bind-Value="wasteType" ToStringFunc="@converter" Label="Selecteer afvaltype" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Alle types" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Plastic" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Papier" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Organisch" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Locatie</MudText>
                <MudSelect T="FilterOption" @bind-Value="location" ToStringFunc="@converter" Label="Selecteer locatie" Variant="Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@(new FilterOption() { Name = "Alle locaties" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Sector Noord" })" />
                    <MudSelectItem Value="@(new FilterOption() { Name = "Sector Zuid" })" />
                </MudSelect>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Totaal Ingezameld</MudText>
                <MudText Typo="Typo.h4" Class="text-responsive-h4">@FilteredDetections.Count().ToString("N0") kg</MudText>
                <MudText Typo="Typo.caption" Class="text-responsive-body">+12% t.o.v. vorige maand</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Weer vandaag</MudText>
                <MudText Class="text-responsive-body">🌡️ 13°C - Bewolkt met buien</MudText>
                <MudText Class="text-responsive-body">💨 Wind: 16 km/u ZW</MudText>
                <MudText Class="text-responsive-body">💧 Luchtvochtigheid: 87%</MudText>
                <MudText Class="text-responsive-body">🌬️ Luchtkwaliteit: Goed</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Meldingen</MudText>
                <MudText Typo="Typo.h4" Class="text-responsive-h4">@FilteredDetections.Count()</MudText>
                <MudText Typo="Typo.caption" Class="text-responsive-body">Nieuwe meldingen vandaag</MudText>
            </MudPaper>
        </MudItem>
        <!-- Afvalstromen -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Afvalstromen</MudText>
                <MudText Typo="Typo.body1" Class="text-responsive-body">Grafiek met trends komt hier...</MudText>
            </MudPaper>
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                            fill: rgb(62,44,221);
                        }
                    </style>
                </CustomGraphics>
            </MudChart>
        </MudItem>

        <!-- Locaties (map) -->
        <MudItem xs="12" sm="12" md="6" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive" Style="min-height: 350px;">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Locaties</MudText>
                <div id="map" style="height: 300px; min-height: 250px; width: 100%; border-radius: 4px; background-color: #2a2833; margin-top: 1rem;"></div>
            </MudPaper>
        </MudItem>

        <!-- Detections List -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-mobile-responsive" Style="min-height: 200px;">
                <MudStack Row="false" Spacing="2" Class="mobile-responsive-stack">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mobile-hidden">
                        <MudText Typo="Typo.h6" Class="text-responsive-h6">Detections</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportCsv" Class="export-btn btn-animate">Export CSV</MudButton>
                    </MudStack>
                    <div class="mobile-only">
                        <MudText Typo="Typo.h6" Class="text-responsive-h6 mb-2">Detections</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportCsv" Class="export-btn btn-animate" FullWidth="true">Export CSV</MudButton>
                    </div>
                </MudStack>
                @foreach (var d in FilteredDetections)
                {
                    <div class="detection-item fade-in card-mobile-responsive">
                        <MudText Typo="Typo.subtitle1" Class="text-responsive-body">@d.TrashType (@d.Location) - @(d.Time.HasValue ? d.Time.Value.ToShortDateString() : "Onbekend") | Confidence: @d.Confidence</MudText>
                        <MudStack Row="true" Spacing="2" Class="mt-2">
                            <MudCheckBox T="bool" @bind-Checked="d.Verified" Color="Color.Success" Label="Verified" />
                            <MudCheckBox T="bool" @bind-Checked="d.Cleaned" Color="Color.Info" Label="Cleaned" />
                        </MudStack>
                    </div>
                }
            </MudPaper>
        </MudItem>

        <!-- Trends -->
        <MudItem xs="12" Class="dashboard-grid-item">
            <MudPaper Elevation="2" Class="pa-4 card-animate card-mobile-responsive dashboard-card">
                <MudText Typo="Typo.h6" Class="text-responsive-h6">Trends & Analyses</MudText>
                <MudText Typo="Typo.body1" Class="text-responsive-body">Geavanceerde analyses en trendgrafieken komen hier...</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private ClaimsPrincipal? user;
    FilterOption period = new FilterOption { Name = "Laatste 7 dagen" };
    FilterOption wasteType = new FilterOption { Name = "Alle types" };
    FilterOption location = new FilterOption { Name = "Alle locaties" };

    List<AfvalModel> detections = new();
    IEnumerable<AfvalModel> FilteredDetections =>
        detections.Where(d =>
            (wasteType.Name == "Alle types" || d.TrashType == wasteType.Name) &&
            (location.Name == "Alle locaties" || d.Location == location.Name));

    public class FilterOption
    {
        public string Name { get; set; } = string.Empty;

        public override bool Equals(object? o) => (o as FilterOption)?.Name == Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    Func<FilterOption, string> converter = p => p?.Name ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user == null || !user.Identity?.IsAuthenticated == true)
        {
            Nav.NavigateTo("/login");
            return;
        }

        // Load data
        try
        {
            var data = await AfvalClient.GetDataAsync();
            if (data != null)
            {
                detections = new List<AfvalModel>
                {
                    new() { TrashType = data.TrashType ?? "Unknown", Location = data.Location ?? "Unknown Location", Time = data.Time ?? DateTime.Now, Verified = data.Verified, Cleaned = data.Cleaned, Confidence = data.Confidence },
                };
            }
        }
        catch (Exception ex)
        {
            // Fallback to placeholder data if API fails
            Console.WriteLine($"API call failed: {ex.Message}");
            detections = new List<AfvalModel>
            {
                new() { TrashType = "Plastic", Location = "Sector Noord", Time = DateTime.Now.AddDays(-1), Verified = false, Cleaned = false, Confidence = 0.85 },
                new() { TrashType = "Papier", Location = "Sector Zuid", Time = DateTime.Now.AddDays(-2), Verified = false, Cleaned = false, Confidence = 0.92 },
                new() { TrashType = "Organisch", Location = "Sector Noord", Time = DateTime.Now.AddDays(-3), Verified = false, Cleaned = false, Confidence = 0.78 }
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("initMap");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop failed: {ex.Message}");
            }
        }
    }

    private async Task ExportCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Type,Location,Timestamp,Verified,Cleaned,Confidence");
        foreach (var d in FilteredDetections)
        {
            csv.AppendLine($"{d.TrashType},{d.Location},{d.Time:u},{d.Verified},{d.Cleaned},{d.Confidence}");
        }
        await JS.InvokeVoidAsync("downloadCsv", "detections.csv", csv.ToString());
    }

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
}