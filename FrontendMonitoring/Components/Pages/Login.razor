@page "/login"
@using MudBlazor
@using FrontendMonitoring.Models
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject FrontendMonitoring.Services.AuthenticationService AuthService

<MudPaper Class="pa-6 mx-auto mt-12 mud-width-full mud-width-md" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">@(_isRegistering ? "Register" : "Login")</MudText>

    <MudTextField Label="Email" @bind-Value="_email" FullWidth="true" />
    <MudTextField Label="Password" @bind-Value="_password" InputType="InputType.Password" FullWidth="true" />

    <MudStack Direction="Row" Spacing="2" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleAction">
            @(_isRegistering ? "Register" : "Login")
        </MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@ToggleMode">
            @(_isRegistering ? "Switch to Login" : "Switch to Register")
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string _email;
    private string _password;
    private bool _isRegistering = false;

    private async Task HandleAction()
    {
        if (_isRegistering)
            await RegisterUser();
        else
            await LoginUser();
    }

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_password))
        {
            Snackbar.Add("Fill in both email and password.", Severity.Warning);
            return;
        }

        var registerData = new RegisterModel
        {
            Email = _email,
            Password = _password
        };

        try
        {
            var success = await AuthService.RegisterAsync(registerData);

            if (success)
            {
                Snackbar.Add("Registered successfully. You can now log in.", Severity.Success);
                _isRegistering = false;
            }
            else
            {
                Snackbar.Add("Register failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_password))
        {
            Snackbar.Add("Please fill in both fields!", Severity.Warning);
            return;
        }

        var loginData = new LoginModel
        {
            Email = _email,
            Password = _password
        };

        try
        {
            var token = await AuthService.LoginAsync(loginData);

            if (!string.IsNullOrWhiteSpace(token))
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                Snackbar.Add("Login successful!", Severity.Success);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Snackbar.Add("Login failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception: {ex.Message}", Severity.Error);
        }
    }

    private void ToggleMode()
    {
        _isRegistering = !_isRegistering;
    }
}
