@page "/login"
@using MudBlazor
@using FrontendMonitoring.Models
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IJSRuntime JS

<MudPaper Class="pa-6 mx-auto mt-12 mud-width-full mud-width-md" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">@(_isRegistering ? "Register" : "Login")</MudText>

    <MudTextField Label="Email" @bind-Value="_email" FullWidth="true" />
    <MudTextField Label="Password" @bind-Value="_password" InputType="InputType.Password" FullWidth="true" />

    <MudStack Direction="Row" Spacing="2" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleAction">
            @(_isRegistering ? "Register" : "Login")
        </MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@ToggleMode">
            @(_isRegistering ? "Switch to Login" : "Switch to Register")
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _isRegistering = false;

    private async Task HandleAction()
    {
        if (_isRegistering)
            await RegisterUser();
        else
            await LoginUser();
    }

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_password))
        {
            Snackbar.Add("Fill in both email and password.", Severity.Warning);
            return;
        }

        var registerData = new RegisterModel
            {
                Email = _email,
                Password = _password
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://bitbybitwebapi.azurewebsites.net/account/register", registerData);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Registered successfully. You can now log in.", Severity.Success);
                _isRegistering = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Register failed: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_password))
        {
            Snackbar.Add("Please fill in both fields!", Severity.Warning);
            return;
        }

        var loginData = new LoginModel
            {
                Email = _email,
                Password = _password
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://bitbybitwebapi.azurewebsites.net/account/login", loginData);            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                // Store token in localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                Snackbar.Add("Login successful!", Severity.Success);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Login failed: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception: {ex.Message}", Severity.Error);
        }
    }

    private void ToggleMode()
    {
        _isRegistering = !_isRegistering;
    }
}