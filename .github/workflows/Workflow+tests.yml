name: Build, Test and Deploy ASP.NET Core WebAPI to Azure

env:
  ARTIFACT_NAME: WebApi
  DOTNET_CORE_VERSION: 9.0.x
  PUBLISH_DIRECTORY: "./out/publish"
  AZURE_WEBAPP_NAME: bitbybitwebapi

on:
  push:
    branches:
      - main
      - master
      - deployment
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      secrets-valid: ${{ steps.validate-secrets.outputs.valid }}
      error-message: ${{ steps.validate-secrets.outputs.error-message }}
    steps:
      - name: "Validate all required secrets and configuration"
        id: validate-secrets
        run: |
          echo "üîç Validating deployment prerequisites..."
          
          # Initialize validation status
          VALIDATION_PASSED=true
          ERROR_MESSAGES=()
          
          # Check AZURE_WEBAPP_NAME secret
          if [[ -z "${{ secrets.AZURE_WEBAPP_NAME }}" ]]; then
            echo "‚ùå AZURE_WEBAPP_NAME secret is missing or empty"
            ERROR_MESSAGES+=("AZURE_WEBAPP_NAME secret is required for deployment")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ AZURE_WEBAPP_NAME secret is configured"
          fi
          
          # Check Azure Client ID
          if [[ -z "${{ secrets.AZUREAPPSERVICE_CLIENTID_BBCD49BBABEB403BBBFF41809E88EFF1 }}" ]]; then
            echo "‚ùå Azure Client ID secret is missing or empty"
            ERROR_MESSAGES+=("AZUREAPPSERVICE_CLIENTID secret is required for Azure authentication")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ Azure Client ID is configured"
          fi
          
          # Check Azure Tenant ID
          if [[ -z "${{ secrets.AZUREAPPSERVICE_TENANTID_F4E6BDB44EE54B8A9AD0E508C38F04B5 }}" ]]; then
            echo "‚ùå Azure Tenant ID secret is missing or empty"
            ERROR_MESSAGES+=("AZUREAPPSERVICE_TENANTID secret is required for Azure authentication")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ Azure Tenant ID is configured"
          fi
          
          # Check Azure Subscription ID
          if [[ -z "${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_8413332D7BD843F5AE90CD923D187DA9 }}" ]]; then
            echo "‚ùå Azure Subscription ID secret is missing or empty"
            ERROR_MESSAGES+=("AZUREAPPSERVICE_SUBSCRIPTIONID secret is required for Azure authentication")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ Azure Subscription ID is configured"
          fi
          
          # Validate environment variables
          if [[ -z "${{ env.AZURE_WEBAPP_NAME }}" ]]; then
            echo "‚ùå AZURE_WEBAPP_NAME environment variable is not set"
            ERROR_MESSAGES+=("AZURE_WEBAPP_NAME environment variable must be defined")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ AZURE_WEBAPP_NAME environment variable: ${{ env.AZURE_WEBAPP_NAME }}"
          fi
          
          # Check .NET version configuration
          if [[ -z "${{ env.DOTNET_CORE_VERSION }}" ]]; then
            echo "‚ùå DOTNET_CORE_VERSION environment variable is not set"
            ERROR_MESSAGES+=("DOTNET_CORE_VERSION environment variable must be defined")
            VALIDATION_PASSED=false
          else
            echo "‚úÖ .NET Core version configured: ${{ env.DOTNET_CORE_VERSION }}"
          fi
          
          # Output results
          if [[ "$VALIDATION_PASSED" == "true" ]]; then
            echo "‚úÖ All prerequisites validated successfully!"
            echo "üöÄ Ready to proceed with build and deployment"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "error-message=" >> $GITHUB_OUTPUT
          else
            echo ""
            echo "‚ùå Validation failed! The following issues were found:"
            printf '%s\n' "${ERROR_MESSAGES[@]}" | sed 's/^/  - /'
            echo ""
            echo "üîß Please configure the missing secrets in your repository settings:"
            echo "   Repository Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo ""
            
            # Join error messages with newlines for output
            ERROR_MSG=$(printf '%s\n' "${ERROR_MESSAGES[@]}")
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "error-message<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_MSG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
              exit 1
          fi

      - name: "Display validation summary"
        if: always()
        run: |
          echo "üìã Validation Summary:"
          echo "‚îú‚îÄ‚îÄ Secrets Status: ${{ steps.validate-secrets.outputs.valid == 'true' && '‚úÖ Valid' || '‚ùå Invalid' }}"
          echo "‚îú‚îÄ‚îÄ Azure App Name: ${{ env.AZURE_WEBAPP_NAME }}"
          echo "‚îú‚îÄ‚îÄ .NET Version: ${{ env.DOTNET_CORE_VERSION }}"
          echo "‚îî‚îÄ‚îÄ Publish Directory: ${{ env.PUBLISH_DIRECTORY }}"
          
          if [[ "${{ steps.validate-secrets.outputs.valid }}" != "true" ]]; then
            echo ""
            echo "‚ö†Ô∏è  Build and deployment will be skipped due to validation failures"
          fi

  build:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.secrets-valid == 'true'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "Prerequisites validation check"
        run: |
          echo "‚úÖ Prerequisites validated successfully"
          echo "üî® Starting build process for BitByBitTrashAPI"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore BitByBitTrashAPI.sln

      - name: Build
        run: dotnet build BitByBitTrashAPI.sln --no-restore --configuration Release

      - name: Test
        run: dotnet test BitByBitTrashAPI.sln --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Clean publish directory
        run: |
          rm -rf ${{ env.PUBLISH_DIRECTORY }}
          mkdir -p ${{ env.PUBLISH_DIRECTORY }}

      - name: Publish
        run: dotnet publish ./BitByBitTrashAPI --output ${{ env.PUBLISH_DIRECTORY }} --configuration Release --no-build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}
  deploy:
    runs-on: ubuntu-latest
    needs: [check, build]
    if: needs.check.outputs.secrets-valid == 'true' && needs.build.result == 'success'
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Pre-deployment validation"
        run: |
          echo "üöÄ Starting deployment process"
          echo "‚îú‚îÄ‚îÄ App Name: ${{ env.AZURE_WEBAPP_NAME }}"
          echo "‚îú‚îÄ‚îÄ Artifact: ${{ env.ARTIFACT_NAME }}"
          echo "‚îî‚îÄ‚îÄ Publish Directory: ${{ env.PUBLISH_DIRECTORY }}"

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}

      - name: "Verify deployment package"
        run: |
          echo "üì¶ Verifying deployment package..."
          if [ ! -d "${{ env.PUBLISH_DIRECTORY }}" ]; then
            echo "‚ùå Publish directory not found: ${{ env.PUBLISH_DIRECTORY }}"
            exit 1
          fi
          
          if [ -z "$(ls -A ${{ env.PUBLISH_DIRECTORY }})" ]; then
            echo "‚ùå Publish directory is empty"
            exit 1
          fi
          
          echo "‚úÖ Deployment package verified"
          echo "üìÅ Package contents:"
          ls -la ${{ env.PUBLISH_DIRECTORY }}

      - name: Login to Azure
        id: azure-login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_BBCD49BBABEB403BBBFF41809E88EFF1 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F4E6BDB44EE54B8A9AD0E508C38F04B5 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_8413332D7BD843F5AE90CD923D187DA9 }}

      - name: "Verify Azure authentication"
        run: |
          echo "üîê Verifying Azure authentication..."
          az account show --query "name" -o tsv
          echo "‚úÖ Azure authentication successful"

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          package: ${{ env.PUBLISH_DIRECTORY }}

      - name: "Post-deployment verification"
        if: always()
        run: |
          if [[ "${{ steps.deploy-to-webapp.outcome }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê App URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
            echo "üìä You can verify the deployment by visiting the URL above"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Please check the deployment logs above for details"
            exit 1
          fi

  # Job to handle failed prerequisites
  prerequisites-failed:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.secrets-valid != 'true'
    steps:
      - name: "Prerequisites validation failed"
        run: |
          echo "‚ùå Prerequisites validation failed!"
          echo ""
          echo "üö´ The following issues were found:"
          echo "${{ needs.check.outputs.error-message }}"
          echo ""
          echo "üîß To fix these issues:"
          echo "1. Go to your repository Settings"
          echo "2. Navigate to Secrets and variables ‚Üí Actions"
          echo "3. Add the missing secrets with the correct values"
          echo "4. Re-run the workflow"
          echo ""
          echo "üìö For more information about GitHub secrets:"
          echo "https://docs.github.com/en/actions/security-guides/encrypted-secrets"
